; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "IP Notifier"
#define MyAppVersion "0.1"
#define MyAppExeName "ip-notifier.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{16D49C3F-6CCE-40FA-8601-1F8C343025EE}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
DefaultDirName={pf}\{#MyAppName}
DisableDirPage=yes
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
LicenseFile=LICENSE
OutputBaseFilename=setup
OutputDir=installer
Password=qwerty123
Compression=lzma
SolidCompression=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "ip-notifier\bin\Debug\ip-notifier.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "ip-notifier\bin\Debug\ip-notifier.exe.config"; DestDir: "{app}"; Flags: ignoreversion
Source: "ip-notifier\bin\Debug\log4net.dll"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Code]
#include "services.inno"

var
  FtpSettingsPage: TInputQueryWizardPage;
  FtpFullPathEditIndex: Integer;
  FtpUserEditIndex: Integer;
  FtpPasswordEditIndex: Integer;

function UpdateSettings(FtpFullPath, FtpUser, FtpPassword: string): Boolean;
var
  XMLNode: Variant;
  XMLDocument: Variant;  
  SettingsFileName: String;
begin
  Result := False;
  SettingsFileName := ExpandConstant('{app}') + '\ip-notifier.exe.config';
  XMLDocument := CreateOleObject('Msxml2.DOMDocument.6.0');
  try
    XMLDocument.async := False;
    XMLDocument.preserveWhiteSpace := True;
    XMLDocument.load(SettingsFileName);    
    if (XMLDocument.parseError.errorCode <> 0) then
      RaiseException(XMLDocument.parseError.reason)
    else
    begin
      XMLDocument.setProperty('SelectionLanguage', 'XPath');

      XMLNode := XMLDocument.selectSingleNode('//configuration/appSettings/add[@key="ftpPath"]');
      XMLNode.setAttribute('value', FtpFullPath);

      XMLNode := XMLDocument.selectSingleNode('//configuration/appSettings/add[@key="ftpUser"]');
      XMLNode.setAttribute('value', FtpUser);

      XMLNode := XMLDocument.selectSingleNode('//configuration/appSettings/add[@key="ftpPwd"]');
      XMLNode.setAttribute('value', FtpPassword);

      XMLDocument.save(SettingsFileName);
      Result := True;
    end;
  except
    MsgBox('An error occured during processing application ' +
      'config file!' + #13#10 + GetExceptionMessage, mbError, MB_OK);
  end;
end;

procedure InitializeWizard;
begin
  FtpSettingsPage := CreateInputQueryPage(wpSelectTasks,
    'FTP Settings', 
    'Please specify your fullpath where you want the IP notifications to be uploaded, and the credentials to be used, then click Next.',
    'All fields are required.');

  FtpFullPathEditIndex := FtpSettingsPage.Add('FullPath:', False);
  FtpUserEditIndex := FtpSettingsPage.Add('User:', False);
  FtpPasswordEditIndex := FtpSettingsPage.Add('Password:', True);

  FtpSettingsPage.Edits[FtpFullPathEditIndex].Text := 'ftp://ftp.my-ftp-server.com/my-ip.txt';
end;

function NextButtonClick(CurPageID: Integer): Boolean;
var
  I: Integer;
begin
  if CurPageID = FtpSettingsPage.ID then begin
    Result := (Length(FtpSettingsPage.Values[0]) > 0) and (Length(FtpSettingsPage.Values[1]) > 0) and (Length(FtpSettingsPage.Values[2]) > 0);
    if (Result = False) then
    begin
       MsgBox('All fields are required.', mbError, MB_OK);  
    end;
  end else if CurPageID = wpFinished then begin 
      Result := True;
      if (UpdateSettings(FtpSettingsPage.Edits[FtpFullPathEditIndex].Text, FtpSettingsPage.Edits[FtpUserEditIndex].Text, FtpSettingsPage.Edits[FtpPasswordEditIndex].Text) = False) then 
      begin
        MsgBox('There was a problem saving the settings, please retry reinstalling.', mbError, MB_OK);  
      end;
      Sleep(5000);
      StartService('IP Notifier');
  end else
    Result := True;
end;

[Run]
Filename: "{app}\ip-notifier.exe"; Parameters: "--install"

[UninstallRun]
Filename: "{app}\ip-notifier.exe"; Parameters: "--uninstall"